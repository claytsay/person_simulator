{"version":3,"sources":["logo.svg","ChatComps.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TextCard","props","react_default","a","createElement","className","type","name","content","map","text","TextCardList","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","cards","reverse","card","ChatComps_TextCard","Component","ChatForm","_Component2","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","state","handleSubmit","event","preventDefault","http","XMLHttpRequest","data","onload","response","JSON","parse","responseText","push","result","console","log","open","send","stringify","handleChange","setState","target","onSubmit","onChange","required","ChatBox","_Component3","_getPrototypeOf3","_this2","_len2","_key2","ChatComps_TextCardList","ChatComps_ChatForm","App","ChatComps_ChatBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21e8b8cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nexport const TextCard = (props) => {\r\n  return (\r\n    <div className={\"TextCard \" + props.type}>\r\n      <div className=\"Name\">\r\n        <b>{props.name}</b>\r\n      </div>\r\n      <div className=\"Content\">\r\n        <ul>\r\n          {props.content.map((text) => {\r\n            return (<li>{text}</li>)\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport class TextCardList extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TextCardList\">\r\n        {this.props.cards.reverse().map((card) => <TextCard {...card} />)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport class ChatForm extends Component {\r\n  state = {\r\n    text: \"\"\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    let http = new XMLHttpRequest();\r\n    let url = \"http://127.1.0.0\";   // TODO: Make sure that this is right!\r\n    let data = {\r\n      \"name\": \"Nick Carraway\",\r\n      \"text\": this.state.text\r\n    }\r\n    \r\n    http.onload = () => {\r\n      let response = JSON.parse(http.responseText);\r\n      this.props.cards.push({\r\n        \"name\": response.name,\r\n        \"type\": \"Server\",\r\n        \"content\": response.result\r\n      });\r\n      console.log(http.response);\r\n    }\r\n    http.open(\"POST\", url);  // TODO: Does this follow guidelines?\r\n    http.send(JSON.stringify(data));\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ text: event.target.value })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.text}\r\n          onChange={this.handleChange}\r\n          required\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport class ChatBox extends Component {\r\n  state = {\r\n    cards: [\r\n      {\r\n        name: \"Boberto\",\r\n        type: \"Client\",\r\n        content: [\r\n          \"1 banana,\",\r\n          \"2 banana,\",\r\n          \"3 banana!\"\r\n        ]\r\n      },\r\n      {\r\n        name: \"Roberto\",\r\n        type: \"Server\",\r\n        content: [\r\n          \"I really like bananas.\"\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ChatBox\">\r\n        <TextCardList cards={this.state.cards}/>\r\n        <ChatForm cards={this.state.cards}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport * as AuthComp from './AuthComps.js';\nimport * as ChatComps from './ChatComps.js';\nimport './App.css';\n\nclass App extends Component {\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>person_simulator</h1>\n          <p>An app designed to simulate people.</p>\n        </header>\n        <ChatComps.ChatBox />\n      </div>\n    );\n  }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}