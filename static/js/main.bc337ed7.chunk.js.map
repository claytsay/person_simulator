{"version":3,"sources":["logo.svg","ChatComps.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","http","XMLHttpRequest","url","TextCard","props","react_default","a","createElement","className","type","name","content","map","text","ChatBox","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","cards","names","handleSubmit","event","preventDefault","push","document","getElementById","reset","data","callback","onload","open","send","JSON","stringify","makeRequest","response","parse","responseText","result","setState","handleChange","target","value","inherits","createClass","key","slice","card","ChatComps_TextCard","id","onSubmit","onChange","required","Component","App","ChatComps_ChatBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc337ed7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\n// = = = = = = = = = = = = =\r\n// Constants\r\n// = = = = = = = = = = = = =\r\n\r\nconst http = new XMLHttpRequest();\r\nconst url = \"http://127.1.0.0\";\r\n\r\n\r\n// = = = = = = = = = = = = =\r\n// React Components\r\n// = = = = = = = = = = = = =\r\n\r\nexport const TextCard = (props) => {\r\n  return (\r\n    <div className={\"TextCard \" + props.type}>\r\n      <div className=\"Name\">\r\n        <b>{props.name}</b>\r\n      </div>\r\n      <div className=\"Content\">\r\n        {props.content.map((text) => {\r\n          return (<p className=\"Text\">{text}</p>)\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport class ChatBox extends Component {\r\n  state = {\r\n    cards: [],\r\n    names: [],\r\n    text: \"\"\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    this.state.cards.push({\r\n      name: \"User\",\r\n      type: \"Client\",\r\n      content: [this.state.text]\r\n    });\r\n    document.getElementById(\"ChatForm\").reset(); // TODO: This doesn't work.\r\n    let data = {\r\n      \"name\": \"Nick Carraway\",\r\n      \"text\": this.state.text\r\n    };\r\n\r\n    makeRequest(\"POST\", data, () => {\r\n      let response = JSON.parse(http.responseText);\r\n      this.state.cards.push({\r\n        name: response.name,\r\n        type: \"Server\",\r\n        content: response.result\r\n      });\r\n      this.setState(this.state);\r\n    });\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ text: event.target.value })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ChatBox\">\r\n        <div className=\"TextCardList\">\r\n          {this.state.cards.slice(-6).map((card) => <TextCard {...card} />)}\r\n        </div>\r\n        <form id=\"ChatForm\" onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.text}\r\n            onChange={this.handleChange}\r\n            required\r\n          />\r\n          <select>\r\n            <option>Lolololol</option>\r\n            <option>Hehehehehe</option>\r\n            <option>santehuoteu</option>\r\n          </select>\r\n          <button type=\"submit\">Send</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// = = = = = = = = = = = = =\r\n// Utility Functions\r\n// = = = = = = = = = = = = =\r\n/**\r\n * Makes an HTTP request.\r\n * \r\n * Makes an asynchronous HTTP request, executing the callback\r\n * function when finished.\r\n * \r\n * @param {string} type \r\n * @param {object} data \r\n * @param {function} callback \r\n */\r\nfunction makeRequest(type, data, callback) {\r\n  http.onload = callback;\r\n  http.open(type, url);\r\n  http.send(JSON.stringify(data));\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport * as AuthComp from './AuthComps.js';\nimport * as ChatComps from './ChatComps.js';\nimport './App.css';\n\nclass App extends Component {\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>person_simulator</h1>\n          <p>An app designed to simulate people.</p>\n        </header>\n        <ChatComps.ChatBox />\n      </div>\n    );\n  }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}