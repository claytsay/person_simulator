{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TextCard","props","react_default","a","createElement","className","TextCardList","cards","reverse","map","card","App_TextCard","Form","state","text","handleSubmit","event","preventDefault","http","XMLHttpRequest","onreadystatechange","result","console","log","toString","open","send","handleChange","_this","setState","target","value","onSubmit","this","type","userName","onChange","required","Component","App","name","content","App_TextCardList","App_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCKlCC,eAAW,SAACC,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,4BAKAE,EAAe,SAACL,GACpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZJ,EAAMM,MAAMC,UAAUC,IAAI,SAACC,GAAD,OAAUR,EAAAC,EAAAC,cAACO,EAAaD,OAKnDE,6MACJC,MAAS,CACPC,KAAM,MAGRC,aAAe,SAACC,GACdA,EAAMC,iBAEN,IAAMC,EAAO,IAAIC,eAEjBD,EAAKE,mBAAqB,SAACC,GACzBC,QAAQC,IAAIF,EAAOG,aAErBN,EAAKO,KAAK,MAJE,oBAKZP,EAAKQ,UAGPC,aAAe,SAACX,GACdY,EAAKC,SAAS,CAACf,KAAME,EAAMc,OAAOC,iFAIlC,OACE7B,EAAAC,EAAAC,cAAA,QAAM4B,SAAUC,KAAKlB,cACnBb,EAAAC,EAAAC,cAAA,SACE8B,KAAK,OACLH,MAAOE,KAAKpB,MAAMsB,SAClBC,SAAUH,KAAKN,aACfU,UAAQ,IAEVnC,EAAAC,EAAAC,cAAA,UAAQ8B,KAAK,UAAb,iBA9BWI,aAuEJC,6MAjCb1B,MAAQ,CACNN,MAAO,CACL,CACEiC,KAAM,UACNC,QAAS,CACP,YACA,YACA,cAGJ,CACED,KAAM,UACNC,QAAS,CACP,qGAON,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,iDAEFF,EAAAC,EAAAC,cAACsC,EAAD,CAAcnC,MAAO0B,KAAKpB,MAAMN,QAChCL,EAAAC,EAAAC,cAACuC,EAAD,cA5BUL,aC9CEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.256ed8df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nconst TextCard = (props) => {\n  return (\n    <div className=\"TextCard\">\n      <p>Hello World!</p>\n    </div>\n  );\n}\n\nconst TextCardList = (props) => {\n  return (\n    <div className=\"TextCardList\">\n      {props.cards.reverse().map((card) => <TextCard {...card}/>)}\n    </div>\n  );\n}\n\nclass Form extends Component {\n  state =  {\n    text: \"\"\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    // makeCorsRequest(\"http://127.1.0.0\");\n    const http = new XMLHttpRequest();\n    const url = \"http://127.1.0.0\";\n    http.onreadystatechange = (result) => {\n      console.log(result.toString());\n    }\n    http.open(\"GET\", url);\n    http.send();\n  }\n\n  handleChange = (event) => {\n    this.setState({text: event.target.value})\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input \n          type=\"text\"\n          value={this.state.userName}\n          onChange={this.handleChange}\n          required\n        />\n        <button type=\"submit\">Enter</button>\n      </form>\n\n    );\n  }\n}\n\nclass App extends Component {\n  state = {\n    cards: [\n      {\n        name: \"Boberto\",\n        content: [\n          \"1 banana,\",\n          \"2 banana,\",\n          \"3 banana!\"\n        ]\n      },\n      {\n        name: \"Roberto\",\n        content: [\n          \"I really like bananas.\"\n        ]\n      }\n    ]\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>person_simulator</h1>\n          <p>An app designed to simulate people.</p>\n        </header>\n        <TextCardList cards={this.state.cards}/>\n        <Form />\n      </div>\n    );\n  }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}